// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

model Role {
  id      String   @id @default(uuid())
  name    String   @unique
  quality String
  person  Person[]
}

model Person {
  id                 String   @id @default(uuid())
  role_id            String
  first_name         String
  last_name          String
  email              String   @unique
  is_blacklisted     Boolean  @default(false)
  password           String?
  cities_of_activity String[]
  civility           String?
  phone              String?  @unique
  birth_date         String?
  birth_city         String?
  city               String?
  street             String?
  postal_code        String?
  note               String?
  status             String?  @default("En attente")
  created_at         DateTime @default(now())
  updated_at         DateTime @updatedAt

  companies Company_has_person[]
  modules   Module_has_trainer[]
  Role      Role                 @relation(fields: [role_id], references: [id])
  comments  Comment[]
  shortcuts Shortcuts[]
}

model Shortcuts {
  id        String  @id @default(uuid())
  person_id String?
  name      String
  link      String
  position  Int
  icon      String
  color     String

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  Person     Person?  @relation(fields: [person_id], references: [id])
}

model Company_has_person {
  id         String  @id @default(uuid())
  company_id String
  person_id  String
  quality    String?

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  contact    Person   @relation(fields: [person_id], references: [id])
  Company    Company  @relation(fields: [company_id], references: [id])
}

model Company {
  id           String  @id @default(uuid())
  name         String
  siret        String? @unique
  street       String?
  postal_code  String?
  city         String?
  website_link String?

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  contact  Company_has_person[]
  comments Comment[]
}

model Module_has_trainer {
  id        String @id @default(uuid())
  person_id String
  Person    Person @relation(fields: [person_id], references: [id])
  module_id String
  Module    Module @relation(fields: [module_id], references: [id])

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Module {
  id                    String  @id @default(uuid())
  speciality_bpf_id     String?
  objective_bpf_id      String?
  training_objective_id String?
  title                 String  @unique
  category              String
  amount                Float
  duration              String
  website_link          String?

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  trainers           Module_has_trainer[]
  Speciality_bpf     Speciality_bpf?      @relation(fields: [speciality_bpf_id], references: [id])
  Objective_bpf      Objective_bpf?       @relation(fields: [objective_bpf_id], references: [id])
  Training_objective Training_objective?  @relation(fields: [training_objective_id], references: [id])

  comments Comment[]
}

model Speciality_bpf {
  id     String   @id @default(uuid())
  name   String
  number Int
  module Module[]
}

model Objective_bpf {
  id     String   @id @default(uuid())
  name   String
  number Int
  module Module[]
}

model Training_objective {
  id      String   @id @default(uuid())
  content String
  module  Module[]
}

model Ressource {
  id               String  @id @default(uuid())
  name             String
  type_id          String
  price            Float
  adress           String?
  postal_code      String?
  city             String?
  acquisition_date String?

  created_at     DateTime       @default(now())
  updated_at     DateTime       @updatedAt
  comments       Comment[]
  Ressource_type Ressource_type @relation(fields: [type_id], references: [id])
}

model Ressource_type {
  id        String      @id @default(uuid())
  name      String      @unique
  ressource Ressource[]
}

model Comment {
  id           String  @id @default(uuid())
  company_id   String?
  person_id    String?
  module_id    String?
  ressource_id String?
  title        String?
  content      String
  category_id  String

  created_at DateTime         @default(now())
  updated_at DateTime         @updatedAt
  category   Comment_category @relation(fields: [category_id], references: [id])
  Company    Company?         @relation(fields: [company_id], references: [id])
  Ressource  Ressource?       @relation(fields: [ressource_id], references: [id])
  Module     Module?          @relation(fields: [module_id], references: [id])
  Person     Person?          @relation(fields: [person_id], references: [id])
}

model Comment_category {
  id        String    @id @default(uuid())
  name      String    @unique
  is_unique Boolean   @default(false)
  comment   Comment[]
}
